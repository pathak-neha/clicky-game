{"version":3,"sources":["components/FriendCard/FriendCard.js","components/ScoreDiv.js","components/TextDiv.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","updateStats","clickCounter","id","alt","name","src","image","ScoreDiv","info","score","topScore","TextDiv","guess","App","state","cards","shuffle","array","j","x","i","length","parseInt","Math","random","clicks","_this","continueGame","newGame","updateCard","filter","card","concat","setState","map","obj","rObj","_this2","this","components_TextDiv","components_ScoreDiv","components_FriendCard_FriendCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6778afa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./FriendCard.css\";\r\n\r\nconst FriendCard = props => (\r\n  <div className=\"card\" onClick={() => props.updateStats(props.clickCounter, props.id)}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default FriendCard;\r\n","import React from \"react\";\r\n\r\nconst ScoreDiv = props => (\r\n  <span>SCORE: {props.info.score} | TOP SCORE: {props.info.topScore}</span>\r\n);\r\n\r\nexport default ScoreDiv;\r\n","import React from \"react\";\r\n\r\nconst TextDiv = props => (\r\n    <span>{props.info.guess === \"null\" ? \"CLICK AN IMAGE TO BEGIN\" : props.info.guess}</span>\r\n);\r\n\r\nexport default TextDiv;\r\n","import React, { Component } from 'react';\nimport cards from \"./cards.json\"\nimport FriendCard from \"./components/FriendCard\";\nimport ScoreDiv from \"./components/ScoreDiv\";\nimport TextDiv from \"./components/TextDiv\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    cards: cards,\n    score: 0,\n    topScore: 0,\n    guess: \"null\"\n  }\n\n  shuffle = array => {\n    for (var j, x, i = array.length; i; j = parseInt(Math.random() * i), x = array[--i], array[i] = array[j], array[j] = x);\n    return array;\n  }\n\n  updateStats = (clicks, id) => {\n    if (clicks === 0) {\n      this.continueGame(id)\n    } else {\n      this.newGame();\n    }\n  }\n\n  continueGame = id => {\n    const updateCard = this.state.cards.filter(card => card.id === id);\n    updateCard[0].clickCounter += 1;\n\n    const cards = this.state.cards.filter(card => card.id !== id).concat(updateCard);\n    const score = this.state.score + 1;\n\n    let topScore = this.state.topScore;\n\n    if (topScore < score) {\n      topScore += 1;\n    } else {\n      topScore = this.state.topScore;\n    }\n\n    this.setState({\n      cards: cards,\n      score: score,\n      topScore: topScore,\n      guess: \"YOU GUESSED CORRECTLY!\"\n    })\n  }\n\n  newGame = () => {\n    const cards = this.state.cards.map(obj => {\n      var rObj = {};\n      rObj.id = obj.id;\n      rObj.image = obj.image;\n      rObj.clickCounter = 0;\n      return rObj;\n    });\n    const score = 0;\n    this.setState({\n      cards: cards,\n      score: score,\n      topScore: this.state.topScore,\n      guess: \"YOU GUESSED INCORRECTLY!\"\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar-dark bg-dark\">\n          <div className=\"container\">\n            <nav className=\"nav nav-pills nav-fill navbar-dark bg-dark\">\n              <span className=\"nav-item text-white text-left\">\n                <h3 className=\"brand\">CLICKY GAME</h3>\n              </span>\n              <span className=\"nav-item text-white text-center\">\n                <h3 className=\"stats\"><TextDiv info={this.state} /></h3>\n              </span>\n              <span className=\"nav-item text-white text-right\">\n                <h3 className=\"stats\"><ScoreDiv info={this.state} /></h3>\n              </span>\n            </nav>\n          </div>\n        </nav>\n        <section className=\"flex-column text-center header\">\n          <div className=\"box\">\n          <h1 className=\"banner1\">Clicky Game!</h1>\n          <h2 className=\"banner2\">Click on an image to earn points, but dont click on any image more than once!</h2>\n          </div>\n        </section>\n        <section className=\"container\">\n          <div className=\"container-cards\">\n            {this.shuffle(this.state.cards).map(card => (\n              <FriendCard\n                id={card.id}\n                key={card.id}\n                name={card.name}\n                image={card.image}\n                clickCounter={card.clickCounter}\n                updateStats={this.updateStats}\n              />\n            ))}\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}